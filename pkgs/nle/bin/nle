#!/usr/bin/env bash
# with-packages direnv niv diffutils nix-wrapped nr coreutils findutils gawk curl
set -e

if [[ $PINNED != '1' && -e nle-pinned.sh ]];then
  PINNED=1 exec ./nle-pinned.sh "$@"
fi

name=$(basename "$0")
[[ -e .disable-$name ]] && exit

fallbackcache=$HOME/.cache
cachebase=${XDG_CACHE_HOME:-$fallbackcache}/$name
impuredir=$cachebase/.impure

args=$@
[[ $1 = -d ]] && shift && cd "$1" && shift

sourcedir=$PWD
cmd=${1:-activate} && [[ -n $1 ]] && shift

nixexpr="(import CFG_STORE_PATH).nle.build { path = ./.; source = \"$sourcedir\"; }"

invalid() {
  echo invalid command: "$args"
  exit 1
}

export NIX_USER_CONF_FILES=$sourcedir/nix/nix.conf

buildfiles=(
  package{,-lock}.json
  yarn.lock npm-{package,deps}.nix .disable-nle-yarn .npmrc
  Gemfile{,.lock}
  gemset.nix
  requirements{,.dev}.txt
  pyproject.toml poetry.lock
  local.nix
  bin
  pkgs nix
  nle-pinned.sh
)

hashfiles() {
  for file in "$@";do
    echo "$file"
  done | sort | xargs cat | md5sum | awk '{ print $1 }'
}

hashbuildfiles() {
  for file in "${buildfiles[@]}";do
    if [[ -e $sourcedir/$file ]];then
      if [[ -d $sourcedir/$file ]];then
        find "$sourcedir/$file" -type f
      else
        echo "$sourcedir/$file"
      fi
    fi
  done
}

hashcontent() {
  hashbuildfiles | sort | xargs cat
  echo CFG_STORE_PATH
  [[ -e .disable-nle-yarn ]] && echo disable-yarn-env
}

impure() {
  local deps out impurefile file
  deps=$1 && shift
  out=$1 && shift
  for file in $deps;do
    [[ -e $file ]] || return 0
  done
  [[ -e $impuredir ]] || mkdir -p "$impuredir"
  impurefile=$impuredir/$(hashfiles $deps)
  if [[ -e $impurefile ]];then
    cp "$impurefile" "$out"
  else
    "$@"
    cp "$out" "$impurefile"
  fi
}

cachedir=$cachebase/$(hashcontent | md5sum | awk '{ print $1 }')
result=$cachedir/result
sourcelink=$cachedir/source

envfiles='.env .env.development .development.env'

case $cmd in
  build)
    [[ $NOCACHE != 1 ]] && [[ -d $cachedir ]] && cd "$cachedir"
    nix build --impure --expr "$nixexpr" --out-link "$sourcedir"/result
    ;;
  rebuild)
    [[ $NOCACHE != 1 ]] && [[ -d $cachedir ]] && cd "$cachedir"
    nix build --impure --expr "$nixexpr" --out-link "$result"
    ;;
  activate)
    "$0" cache
    if [[ -e package.json && -e yarn.lock && -e .enable-nle-yarn && ! -e .disable-nle-yarn ]];then
      if [[ ! -e node_modules || -L node_modules ]];then
        ln -sft . "$("$0" result)"/node_modules
      else
        echo warning: node_modules already exists, not linking
      fi
    fi
    if [[ -e package.json && -e package-lock.json ]];then
      if [[ ! -e node_modules || -L node_modules ]];then
        ln -sft . "$("$0" result)"/lib/node_modules
      else
        echo warning: node_modules already exists, not linking
      fi
    fi
    ;;
  init)
    "$0" activate
    [[ ! -e .envrc ]] && echo 'eval "$('$name' direnv)"' > .envrc
    direnv allow
    ;;
  re)
    "$0" cached | while read src;do
      cd "$src"
      if [[ -e .envrc ]];then
        (direnv stdlib | grep -v 'log_status "loading $rcfile"'; cat .envrc) | bash || true
      else
        "$0" || true
      fi
    done
    ;;
  recache)
    "$0" cached | while read src;do "$0" -d "$src" cache || true; done
    ;;
  cached)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        src=$(< "$dir"/source)
        [[ -d $src ]] && echo "$src"
      done | sort | uniq
    fi
    ;;
  cache)
    [[ -e $result ]] && exit
    mkdir -p "$cachedir"
    echo "$sourcedir" > "$sourcelink"
    for file in ${buildfiles[@]} $NLE_EXTRA_FILES;do
      [[ -e $sourcedir/$file ]] && cp -rt "$cachedir" --parents "$file"
    done
    if [[ $NOCACHE != 1 ]];then
      "$0" -d "$cachedir" generate
    else
      "$0" generate
    fi
    "$0" rebuild
    ;;
  generate)
    impure "Gemfile Gemfile.lock" gemset.nix \
      nr bundix
    if [[ ! -e yarn.lock ]];then
      impure "package.json package-lock.json" node-packages.nix \
        nr nodePackages.node2nix -c /dev/null --pkgs-name nodejs_latest -l package-lock.json --no-copy-node-env
    fi
    if [[ -e package.json && -e yarn.lock && -e .enable-nle-yarn && ! -e .disable-nle-yarn ]];then
      grep '^  resolved "' yarn.lock | grep -v '#' | sed -e 's/[^"]*"//' -e 's/"$//' | while read url;do
        name=$(echo $url | sed 's:/:_:g')
        impure <(echo $url) $name sh -c "nix-prefetch-url --type sha1 $url > $name"
        sed -i "s^$url^$url#$(< $name)^" yarn.lock
      done
      impure 'package.json yarn.lock' yarn.nix \
        sh -c 'nr yarn2nix --builtin-fetchgit > yarn.nix'
      if [[ -e .npmrc ]];then
        token=$(sed -n 1s/.*:_authToken=//p .npmrc)
        header="Authorization: Bearer $token"
        curlOpts='"-H @${builtins.toFile "headers.txt" "'$header'"}"'
      else
        curlOpts='""'
      fi
      sed -i \
        -e "1acurlOpts = $curlOpts;" \
        -e "2,$(wc -l yarn.nix | cut -d' ' -f1)s/fetchurl/customFetchurl/" \
        -e '2acustomFetchurl = args: fetchurl (args // { inherit curlOpts; });' \
        -e 's,ssh://,,' \
        -e 's/builtins.fetchGit/fetchgit/' \
        -e '/^\s\+ref = /d' \
        yarn.nix
      sed -n '/repo = fetchgit/,+2s/.*url = "\(.*\)";/\1/p;s/.* rev = "\(.*\)";/\1/p' yarn.nix |
        paste - - | while read url rev;do
        name=$(echo $url | sed 's:/:_:g')
        impure <(echo $url $rev) $name sh -c "nr nix-prefetch-git $url --rev $rev | jq -r .sha256 > $name"
        sed -i "s^$url\";^\0 sha256 = \"$(< $name)\";^" yarn.nix
      done
    fi
    ;;
  update)
    nr nle.scripts.update
    if [[ -e Gemfile && -e Gemfile.lock ]];then
      if ! nr bundler outdated;then
        if [[ -e gemset.nix ]];then
          hasgemset=1
        else
          hasgemset=
        fi
        rm Gemfile.lock
        nr bundix -l
        [[ -n $hasgemset ]] && rm gemset.nix
      fi
    fi
    if [[ -e nix/sources.nix && -e nix/sources.json ]];then
      tmpfile=$(mktemp)
      cp nix/sources.json $tmpfile
      niv update
      diff -u nix/sources.json $tmpfile || true
      rm -f $tmpfile
    fi
    [[ -x update-helper ]] && ./update-helper
    [[ -e output-paths ]] && "$0" dump-output-paths
    exec "$0" generate
    ;;
  dump-output-paths)
    cp <(nix eval --raw '.#output-paths') output-paths
    ;;
  run)
    eval "$("$0" export)"
    cmd=$1 && shift
    exe=$("$0" result)/bin/$cmd
    if [[ ! -e $exe ]];then
      echo "$cmd: command not found"
      exit 127
    fi
    exec "$exe" "$@"
    ;;
  env)
    grep -vFf <(env) <(
      eval "$(direnv stdlib | grep -v 'log_status "loading $rcfile"')"
      if [[ -e .envrc ]];then
        source_env .
      else
        eval "$("$0" direnv)"
      fi
      env | grep -v -e '^_=' -e '^DIRENV_IN_ENVRC=' -e '^DIRENV_WATCHES=' | sed "s#$PATH_added:##"
    )
    ;;
  export)
    "$0" env | sed 's/^/export /'
    ;;
  direnv)
    echo '[[ -z $IN_NIX_SHELL ]] && source_up || true'
    echo "NOCACHE=$NOCACHE $0 activate 1>&2 || exit 1"
    echo 'PATH_add "$('"$0"' result)/bin"'
    echo export IN_NIX_SHELL=impure
    echo export PATH
    for path in "${buildfiles[@]}";do
      if [[ -d $path ]];then
        echo watch_dir "$path"
      elif [[ -f $path ]];then
        echo watch_file "$path"
      fi
    done
    for file in $envfiles;do
      [[ -e $file ]] && printf 'dotenv %s\n' "$file"
    done
    ;;
  uncache)
    for dir in $cachebase/*;do
      [[ $sourcedir = $(< "$dir/source") ]] && rm -rf "$dir"
    done
    ;;
  clean)
    rm -rf "$cachebase"
    ;;
  gc)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        newdir=$(< "$dir"/source)
        if [[ -d $newdir ]];then
          [[ $("$0" -d "$newdir" cachedir) != $dir ]] && rm -rf "$dir"
        else
          rm -rf "$dir"
        fi
      done
    fi
    ;;
  dir)
    echo "$cachedir"
    ;;
  result)
    realpath "$result"
    ;;
  cachedir)
    exec "$0" dir
    ;;
  pin)
    rev=$(curl -s https://api.github.com/repos/kwbauson/cfg/branches/main | sed -n -e 's/.*"sha": "//' -e 's/",$//' -e '4p')
    sed "s/^rev=REPLACE$/rev=$rev/" > nle-pinned.sh <<'EOF'
#!/usr/bin/env bash
set -e
rev=REPLACE
result=~/.cache/nle/.pinned/$rev
url=https://github.com/kwbauson/cfg/archive/$rev.tar.gz

export NIX_USER_CONF_FILES=$(dirname "$0")/nix/nix.conf

if [[ ! -e $result ]];then
  mkdir -p "$(dirname "$result")"
  nix build --file "$url" nle.unwrapped --out-link "$result"
fi

exec "$result"/bin/nle "$@"
EOF
  if [[ -e .envrc ]];then
    sed -i 's#nle direnv#./nle-pinned.sh direnv#' .envrc
  fi
    ;;
  *)
    invalid
    ;;
esac

exit 0
