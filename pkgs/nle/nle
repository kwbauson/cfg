#!/usr/bin/env bash
# with-packages direnv diffutils nix-wrapped nrs coreutils findutils gawk curl gnugrep gnused jq
set -e

rundir=$PWD
if [[ $PINNED != '1' && $1 != pin ]];then
  while [[ $PWD != / ]];do
    if [[ -e nle.sh ]];then
      nle_sh=$PWD/nle.sh
      cd "$rundir"
      PINNED=1 exec "$nle_sh" "$@"
    else
      cd ..
    fi
  done
fi
cd "$rundir"

args=$@
[[ $1 = '-d' ]] && shift && cd "$1" && shift

sourcedir=$PWD
cmd=${1:-activate} && [[ -n $1 ]] && shift

name=$(basename "$0")
[[ -e .disable-$name ]] && exit

cachebase=${NLE_CACHE:-${XDG_CACHE_HOME:-$HOME/.cache}/$name}
impuredir=$cachebase/.impure

nixexpr="(import SELF_FLAKE { forceFlakeCompat = false; }).nle.build { path = ./.; source = \"$sourcedir\"; }"

invalid() {
  echo invalid command: "$args"
  exit 1
}

buildfiles=(
  local.nix
  bin
  nle.sh
)

hashfiles() {
  for file in "$@";do
    echo "$file"
  done | sort | xargs cat | md5sum | awk '{ print $1 }'
}

hashbuildfiles() {
  for file in "${buildfiles[@]}";do
    if [[ -e $sourcedir/$file ]];then
      if [[ -d $sourcedir/$file ]];then
        find "$sourcedir/$file" -type f
      else
        echo "$sourcedir/$file"
      fi
    fi
  done
}

hashcontent() {
  hashbuildfiles | sort | xargs cat
  echo SELF_FLAKE
  echo "$sourcedir"
  type -p nix
}

impure() {
  local deps out impurefile file
  deps=$1 && shift
  out=$1 && shift
  for file in $deps;do
    [[ -e $file ]] || return 0
  done
  [[ -e $impuredir ]] || mkdir -p "$impuredir"
  impurefile=$impuredir/$(hashfiles $deps)
  if [[ -e $impurefile ]];then
    cp "$impurefile" "$out"
  else
    "$@"
    cp "$out" "$impurefile"
  fi
}

cachedir=$cachebase/$(hashcontent | md5sum | awk '{ print $1 }')
result=$cachedir/result
sourcelink=$cachedir/source

envfiles='.env .env.development .development.env .env.local .local.env'

case $cmd in
  build)
    [[ $NOCACHE != 1 ]] && [[ -d $cachedir ]] && cd "$cachedir"
    nix build --impure --expr "$nixexpr" --out-link "$sourcedir"/result
    ;;
  rebuild)
    [[ $NOCACHE != 1 ]] && [[ -d $cachedir ]] && cd "$cachedir"
    nix build --impure --expr "$nixexpr" --out-link "$result"
    ;;
  repl)
    "$0" prepcache
    cd "$cachedir"
    echo "let env = $nixexpr; in env.pkgs // env.passthru // { inherit env; }" > repl.nix
    nix repl --impure repl.nix
    ;;
  activate)
    "$0" cache
    ;;
  init)
    "$0" activate
    [[ ! -e .envrc ]] && echo 'eval "$('$name' direnv)"' > .envrc
    direnv allow
    ;;
  re)
    "$0" cached | while read src;do
      cd "$src"
      if [[ -e .envrc ]];then
        (direnv stdlib | grep -v 'log_status "loading $rcfile"'; cat .envrc) | bash || true
      else
        "$0" || true
      fi
    done
    ;;
  recache)
    "$0" cached | while read src;do "$0" -d "$src" cache || true; done
    ;;
  cached)
    if [[ -d "$cachebase" && $(echo "$cachebase"/*) != "$cachebase/*" ]];then
      for dir in "$cachebase"/*;do
        src=$(< "$dir"/source)
        [[ -d $src ]] && echo "$src"
      done | sort | uniq
    fi
    ;;
  prepcache)
    [[ -e $result ]] && exit
    mkdir -p "$cachedir"
    echo "$sourcedir" > "$sourcelink"
    for file in ${buildfiles[@]} $NLE_EXTRA_FILES;do
      [[ -e $sourcedir/$file ]] && cp -rt "$cachedir" --parents "$file"
    done
    ;;
  cache)
    [[ -e $result ]] && exit
    "$0" prepcache
    "$0" rebuild
    ;;
  run)
    eval "$("$0" env)"
    cmd=$1 && shift
    exe=$("$0" result)/bin/$cmd
    if [[ ! -e $exe ]];then
      echo "$cmd: command not found"
      exit 127
    fi
    exec "$exe" "$@"
    ;;
  env)
    if [[ $1 != --skip-activate ]];then
      if ! "$0" activate 1>&2;then
        echo exit 1
        exit 1
      fi
    fi
    echo set -o allexport
    echo IN_NIX_SHELL=impure
    if [[ $1 != --skip-activate ]];then
      echo PATH=\""$(realpath "$result")"/bin\":\$PATH
      echo XDG_DATA_DIRS=\""$(realpath "$result")"/share\":\$XDG_DATA_DIRS
    fi
    for file in $envfiles;do
      if [[ -e $file ]];then
        echo "$(< "$file")"
      fi
    done
    if [[ $DIRENV_IN_ENVRC != 1 && -e .envrc ]];then
      grep -v '^eval.*nle.*direnv' .envrc || true
    fi
    echo set +o allexport
    ;;
  direnv)
    echo '
    if [[ -z $IN_NIX_SHELL ]];then
      if type -t source_up_if_exists &> /dev/null;then
        source_up_if_exists
      else
        source_up
      fi
    fi
    '
    echo "$("$0" env)"
    for path in "${buildfiles[@]}";do
      if [[ -d $path ]];then
        echo watch_dir "$path"
      elif [[ -f $path ]];then
        echo watch_file "$path"
      fi
    done
    ;;
  uncache)
    for dir in $cachebase/*;do
      [[ $sourcedir = $(< "$dir/source") ]] && rm -rf "$dir"
    done
    ;;
  clean)
    rm -rf "$cachebase"
    ;;
  gc)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        newdir=$(< "$dir"/source)
        if [[ -d $newdir ]];then
          [[ $("$0" -d "$newdir" cachedir) != $dir ]] && rm -rf "$dir"
        else
          rm -rf "$dir"
        fi
      done
    fi
    ;;
  dir)
    echo "$cachedir"
    ;;
  result)
    if [[ ! -e $result ]];then
      "$0" cache
    fi
    realpath "$result"
    ;;
  cachedir)
    exec "$0" dir
    ;;
  pin)
    rev=$(curl -s https://api.github.com/repos/kwbauson/cfg/branches/main | sed -n -e 's/.*"sha": "//' -e 's/",$//' -e '4p')
    sed "s/^rev=REPLACE$/rev=$rev/" > nle.sh <<'EOF'
#!/bin/sh
set -e
rev=REPLACE
result=${NLE_CACHE:-${XDG_CACHE_HOME:-$HOME/.cache}/nle}/.pinned/$rev
url=https://github.com/kwbauson/cfg/archive/$rev.tar.gz
local_nix_conf=$(dirname "$0")/nix/nix.conf

if [ -e "$local_nix_conf" ];then
  export NIX_CONFIG=$(< "$local_nix_conf")
fi

if [ ! -e "$result" ];then
  mkdir -p "$(dirname "$result")"
  nix build --file "$url" nle --out-link "$result"
fi

exec "$result"/bin/nle "$@"
EOF
  chmod +x nle.sh
  if [[ -e .envrc ]];then
    sed -i 's#nle direnv#./nle.sh direnv#' .envrc
    direnv allow
  fi
    ;;
  *)
    invalid
    ;;
esac

exit 0
