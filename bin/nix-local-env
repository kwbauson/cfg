#!/usr/bin/env bash
# with-packages bundix bundler direnv nix-prefetch-git niv diffutils nix-wrapped
# with-packages nodePackages.npm-check-updates nodePackages.node2nix
set -e

name=nle
[[ -e .disable-$name ]] && exit

nixfile=CFG_STORE_PATH/nix-local-env.nix
[[ $1 = -f ]] && shift && nixfile=$2 && shift
nixexpr="(import $nixfile { path = ./.; })"
fallbackcache=$HOME/.cache
cachebase=${XDG_CACHE_HOME:-$fallbackcache}/$name
impuredir=$cachebase/.impure

args=$@
cmd=
[[ -n $1 && $1 != -d ]] && cmd=$1 && shift
[[ $1 = -d ]] && shift && cd "$1" && shift
sourcedir=$PWD

invalid() {
  echo invalid command: "$args"
  exit 1
}

[[ $cmd != run && -n $1 ]] && invalid

buildfiles=(
  package{,-lock}.json
  # yarn.{lock,nix}
  Gemfile{,.lock}
  gemset.nix
  requirements{,.dev}.txt
  local.nix
  bin
)

hashfiles() {
  for file in "$@";do
    echo "$file"
  done | sort | xargs cat | md5sum | awk '{ print $1 }'
}

hashbuildfiles() {
  echo $nixfile
  for file in "${buildfiles[@]}";do
    if [[ -e $sourcedir/$file ]];then
      if [[ -d $sourcedir/$file ]];then
        find "$sourcedir/$file" -type f
      else
        echo "$sourcedir/$file"
      fi
    fi
  done
}

hashcontent() {
  hashbuildfiles | sort | xargs cat
  echo NIX_LOCAL_ENV_HASH
}

cachedir=$cachebase/$(hashcontent | md5sum | awk '{ print $1 }')
builddir=$cachedir/build
result=$cachedir/result
sourcelink=$cachedir/source

if [[ -z $cmd ]];then
  "$0" cache
  exit $?
fi

envfiles='.env .env.development .development.env'

case $cmd in
  init)
    if [[ ! -e .envrc ]];then
      echo 'eval "$('$name' direnv)"' > .envrc
    fi
    direnv allow
    "$0" cache
    ;;
  recache)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        src=$(< "$dir"/source)
        [[ -d $src ]] && echo "$src"
      done | sort | uniq | while read src;do
        cd "$src"
        set +e
        "$0" init
        set -e
      done
    fi
    ;;
  cache)
    [[ -e $result ]] && exit
    mkdir -p "$builddir"
    echo "$sourcedir" > "$sourcelink"
    for file in ${buildfiles[@]};do
      [[ -e $sourcedir/$file ]] && cp -rt "$builddir" "$sourcedir/$file"
    done
    "$0" generate -d "$builddir"
    "$0" rebuild
    ;;
  generate)
    [[ -e $impuredir ]] || mkdir -p "$impuredir"
    impurefile=
    if [[ -e Gemfile && -e Gemfile.lock ]];then
      impurefile=$impuredir/$(hashfiles Gemfile{,.lock})
      if [[ -e $impurefile ]];then
        cp "$impurefile" gemset.nix
      else
        bundix
        cp gemset.nix "$impurefile"
      fi
    fi
    impurefile=
    if [[ -e package.json && -e package-lock.json ]];then
      impurefile=$impuredir/$(hashfiles package{,-lock}.json)
      if [[ -e $impurefile ]];then
        cp "$impurefile" node-packages.nix
      else
        node2nix -c /dev/null --pkgs-name nodejs_latest -l package-lock.json --no-copy-node-env
        cp node-packages.nix "$impurefile"
      fi
    fi
    ;;
  rebuild)
    [[ -d $builddir ]] && cd "$builddir"
    nix build --impure --expr "$nixexpr" --out-link "$result"
    ;;
  update)
    [[ -x update-helper ]] && ./update-helper
    if [[ -e package.json && -e package-lock.json ]];then
      if ! ncu -e2;then
        ncu -u
        npm --package-lock-only i
      fi
    fi
    if [[ -e Gemfile && -e Gemfile.lock ]];then
      if ! bundler outdated;then
        if [[ -e gemset.nix ]];then
          hasgemset=1
        else
          hasgemset=
        fi
        rm Gemfile.lock
        bundix -l
        [[ -n $hasgemset ]] && rm gemset.nix
      fi
    fi
    set +e
    [[ -e requirements.txt ]] && pur -zfr requirements.txt
    [[ -e requirements.dev.txt ]] && pur -zfr requirements.dev.txt
    set -e
    if [[ -e nix/sources.nix && -e nix/sources.json ]];then
      tmpfile=$(mktemp)
      cp nix/sources.json $tmpfile
      niv update
      diff -u nix/sources.json $tmpfile || true
      rm -f $tmpfile
    fi
    if [[ -e flake.nix && -e flake.lock ]];then
      git status &> /dev/null
      nix flake update --recreate-lock-file
    fi
    [[ -e flake.nix && -e flake.lock ]] && git status &> /dev/null
    ;;
  run)
    "$0" cache
    set -a
    PATH=$result/bin:$PATH
    for file in $envfiles;do
      [[ -e $file ]] && source "$file"
    done
    set +a
    "$@"
    ;;
  direnv)
    "$0" cache 1>&2
    echo source_up
    printf 'PATH=%q:$PATH\n' "$result/bin"
    echo export IN_NIX_SHELL=impure
    echo watch_file "${buildfiles[@]}"
    for file in $envfiles;do
      [[ -e $file ]] && printf 'dotenv %s\n' "$file"
    done
    ;;
  uncache)
    for dir in $cachebase/*;do
      [[ $sourcedir = $(< "$dir/source") ]] && rm -rf "$dir"
    done
    ;;
  clean)
    rm -rf "$cachebase"
    ;;
  gc)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        newdir=$(< "$dir"/source)
        if [[ -d $newdir ]];then
          [[ $("$0" cachedir -d "$newdir") != $dir ]] && rm -rf "$dir"
        else
          rm -rf "$dir"
        fi
      done
    fi
    ;;
  build)
    [[ -d $builddir ]] && cd "$builddir"
    nix build --impure --expr "$nixexpr" --out-link "$sourcedir"/result
    ;;
  cachedir)
    echo "$cachedir"
    ;;
  upgrade-nle)
    nix-env --tarball-ttl 0 -f https://github.com/kwbauson/cfg/tarball/main -iA nle
    ;;
  *)
    invalid
    ;;
esac

exit 0
