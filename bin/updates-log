#!/usr/bin/env bash
# ONLY_LINUX
# with-packages git nix jq bat
set -euo pipefail
repo=${2:-~/cfg}
cd "$repo"
updateRepo=${1:-github:kwbauson/cfg/$(git rev-parse --abbrev-ref HEAD)}

sourcesInfo=$(nix --refresh eval "$repo#sourcesInfo" --json)
updateSourcesInfo=$(nix --refresh eval "$updateRepo#sourcesInfo" --json)

cache=~/.cache/updates-log
mkdir -p "$cache"
cd "$cache"
if [[ ! -e .git ]];then
  git init
fi

ignore=''

git remote show | while read source;do
  if [[ $(echo "$sourcesInfo" | jq ".\"$source\"") = null ]];then
    echo removing unused source "$source"
    git remote remove "$source"
  fi
done

logs=$(
  (
    echo "$sourcesInfo" | jq -r 'keys[]' | while read source;do
      if echo "$source" | grep -qFxf <(echo "$ignore" | tr ' ' '\n');then continue; fi
      read owner repo current_rev < <(echo "$sourcesInfo" | jq -r "[.\"$source\"[\"owner\",\"repo\",\"rev\"]] | @tsv")
      url=https://github.com/$owner/$repo
      if ! git remote show | grep -qFx "$source";then
        git remote add "$source" "$url"
      fi
      new_rev=$(echo "$updateSourcesInfo" |  jq -r ".\"$source\".rev")
      if [[ $current_rev != $new_rev ]];then
        echo "$source $url $current_rev $new_rev"
      fi
    done
  ) | while read source url current_rev new_rev;do
    echo Fetching "$source" 1>&2
    git fetch "$source"
    echo "----- $source -----"
    git -c color.ui=always log --pretty=oneline --abbrev-commit --reverse --no-merges "$current_rev".."$new_rev"
    echo
  done
)
echo "$logs" | bat --style plain
